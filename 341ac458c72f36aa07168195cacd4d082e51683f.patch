From 341ac458c72f36aa07168195cacd4d082e51683f Mon Sep 17 00:00:00 2001
From: Florian Festi <ffesti@redhat.com>
Date: Mon, 15 Apr 2024 16:07:06 +0200
Subject: [PATCH] Upstream debuginfo enablement

All these years, enabling debuginfo has required distros to hijack the
spec %install section with a macro like this:

    %install %{?_enable_debug_packages:%{?buildsubdir:%{debug_package}}}\
    %%install\
    %{nil}

This for a widely used, longtime upstream supported feature is just
gross, and also very non-obvious, feeble and whatnot. And totally
prevents the new append/prepend options from being used with %install.

Turn this isto a proper macro in __spec_install_template that drops the
package definition into a .SPECPART file. This way debuginfo can be part
of the %install script without messing up the parsing.

Fixes: #2204
Fixes: #1878
---
 macros.in               | 6 ++++--
 tests/data/macros.debug | 4 ----
 2 files changed, 4 insertions(+), 6 deletions(-)

diff --git a/macros.in b/macros.in
index c21da70a05..8a80aed454 100644
--- a/macros.in
+++ b/macros.in
@@ -198,11 +198,12 @@ package or when debugging this package.\
 %{nil}
 
 %debug_package \
-%ifnarch noarch\
 %global __debug_package 1\
+%(cat > "%{specpartsdir}/rpm-debuginfo.specpart" << EOL\
 %_debuginfo_template\
 %{?_debugsource_packages:%_debugsource_template}\
-%endif\
+EOL\
+)\
 %{nil}
 
 %_langpack_template() \
@@ -878,6 +879,7 @@ Supplements:   (%{name} = %{version}-%{release} and langpacks-%{1})\
 %{nil}
 %__spec_install_template	#!%{__spec_install_shell}\
 %{__spec_install_pre}\
+%[ "%{_target_cpu}" != "noarch" ? "%{?_enable_debug_packages:%{?buildsubdir:%{debug_package}}}" : ""]\
 %{nil}
 
 #%{__spec_install_body}\
diff --git a/tests/data/macros.debug b/tests/data/macros.debug
index ee0cc9ebe7..453c7cdaf0 100644
--- a/tests/data/macros.debug
+++ b/tests/data/macros.debug
@@ -26,10 +26,6 @@
     %{__os_install_post}\
 %{nil}
 
-%install %{?_enable_debug_packages:%{?buildsubdir:%{debug_package}}}\
-%%install\
-%{nil}
-
 # Should missing buildids terminate a build?
 %_missing_build_ids_terminate_build    1
 
