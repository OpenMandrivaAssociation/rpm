From d5c8423da7cc07169364f31716979a200116466a Mon Sep 17 00:00:00 2001
From: Panu Matilainen <pmatilai@redhat.com>
Date: Thu, 18 Apr 2024 11:43:58 +0300
Subject: [PATCH] Refactor build script parse calls to a helper

Moving logic from switch-cases to data structures is always good,
and so is reducing duplication of names and the like.
---
 build/parseSpec.c | 30 +++++++++++-------------------
 1 file changed, 11 insertions(+), 19 deletions(-)

diff --git a/build/parseSpec.c b/build/parseSpec.c
index e0e9c92443..024fd9a957 100644
--- a/build/parseSpec.c
+++ b/build/parseSpec.c
@@ -1054,6 +1054,15 @@ static int checkPart(int parsePart, enum parseStages stage) {
     return 0;
 }
 
+static int parseBuildScript(rpmSpec spec, int part)
+{
+    const struct sectname_s *sc = getSection(NULL, part);
+    if (sc == NULL) /* can't happen */
+	return -1;
+
+    return parseSimpleScript(spec, sc->name, &spec->sections[sc->section]);
+}
+
 static rpmRC parseSpecSection(rpmSpec *specptr, enum parseStages stage)
 {
     rpmSpec spec = *specptr;
@@ -1090,34 +1099,17 @@ static rpmRC parseSpecSection(rpmSpec *specptr, enum parseStages stage)
 	case PART_PREP:
 	    rpmPushMacroAux(NULL, "setup", "-", doSetupMacro, spec, -1, 0, 0);
 	    rpmPushMacroAux(NULL, "patch", "-", doPatchMacro, spec, -1, 0, 0);
-	    parsePart = parseSimpleScript(spec, "%prep",
-					&(spec->sections[SECT_PREP]));
+	    parsePart = parseBuildScript(spec, parsePart);
 	    rpmPopMacro(NULL, "patch");
 	    rpmPopMacro(NULL, "setup");
 	    break;
 	case PART_CONF:
-	    parsePart = parseSimpleScript(spec, "%conf",
-					&(spec->sections[SECT_CONF]));
-	    break;
 	case PART_BUILDREQUIRES:
-	    parsePart = parseSimpleScript(spec, "%generate_buildrequires",
-				      &(spec->sections[SECT_BUILDREQUIRES]));
-	    break;
 	case PART_BUILD:
-	    parsePart = parseSimpleScript(spec, "%build",
-					&(spec->sections[SECT_BUILD]));
-	    break;
 	case PART_INSTALL:
-	    parsePart = parseSimpleScript(spec, "%install",
-					&(spec->sections[SECT_INSTALL]));
-	    break;
 	case PART_CHECK:
-	    parsePart = parseSimpleScript(spec, "%check",
-					&(spec->sections[SECT_CHECK]));
-	    break;
 	case PART_CLEAN:
-	    parsePart = parseSimpleScript(spec, "%clean",
-					&(spec->sections[SECT_CLEAN]));
+	    parsePart = parseBuildScript(spec, parsePart);
 	    break;
 	case PART_CHANGELOG:
 	    parsePart = parseChangelog(spec);
